// Code generated by mockery v1.0.0. DO NOT EDIT.

package storage

import mock "github.com/stretchr/testify/mock"

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// Delete provides a mock function with given fields: table, id
func (_m *MockProvider) Delete(table string, id string) error {
	ret := _m.Called(table, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(table, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: table, id, item
func (_m *MockProvider) Get(table string, id string, item interface{}) error {
	ret := _m.Called(table, id, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(table, id, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBatch provides a mock function with given fields: table, ids, items
func (_m *MockProvider) GetBatch(table string, ids []string, items interface{}) error {
	ret := _m.Called(table, ids, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, interface{}) error); ok {
		r0 = rf(table, ids, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIndex provides a mock function with given fields: table, index, key, items
func (_m *MockProvider) GetIndex(table string, index string, key map[string]string, items interface{}) error {
	ret := _m.Called(table, index, key, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, interface{}) error); ok {
		r0 = rf(table, index, key, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: table, items
func (_m *MockProvider) List(table string, items interface{}) error {
	ret := _m.Called(table, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(table, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: table, item
func (_m *MockProvider) Put(table string, item interface{}) error {
	ret := _m.Called(table, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(table, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: table, key, opts, items
func (_m *MockProvider) Query(table string, key map[string]string, opts QueryOptions, items interface{}) error {
	ret := _m.Called(table, key, opts, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, QueryOptions, interface{}) error); ok {
		r0 = rf(table, key, opts, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
