schema {
  mutation: Mutation
  query: Query
}

type Mutation {
  login(email: String!, password: String!): Authentication
  # signup(email: String!, password: String!): Authentication
}

type Query {
  organization(id: ID!): Organization!
  organizations: [Organization!]!
}

enum Access {
  developer
  operator
  administrator
}

type App {
  name: String!
  processes: [Process!]!
  status: AppStatus!
}

enum AppStatus {
  converging
  creating
  deleting
  failed
  rollback
  running
  unknown
  updating
}

type Authentication {
  token: String!
  user: User!
}

type Capacity {
  cpu: CapacityMetric!
  mem: CapacityMetric!
}

type CapacityMetric {
  total: Int!
  used: Int!
}

type Member {
  access: Access!
  user: User!
}

type Integration {
  id: ID!
  provider: String!
  title: String!
}

enum IntegrationKind {
  notification
  runtime
  source
}

type Organization {
  access: Access!
  id: ID!
  integrations(kind: IntegrationKind!): [Integration!]!
  locked: Boolean!
  members: [Member!]!
  name: String!
  rack(id: ID!): Rack!
  racks: [Rack!]!
}

type Process {
  id: ID!
  service: String!
}

type Rack {
  id: ID!
  app(name: String!): App!
  apps: [App!]!
  capacity: Capacity!
  name: String!
  runtime: ID
  status: RackStatus!
}

enum RackStatus {
  converging
  creating
  deleting
  failed
  rollback
  running
  unknown
  updating
}

type User {
  email: String!
  id: ID!
}
