schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Mutation {
  instance_terminate(oid: ID!, rid: ID!, iid: ID!): String!
  login(email: String!, password: String!): Authentication
  process_stop(oid: ID!, rid: ID!, app: String!, pid: ID!): String!
  rack_import(oid: ID!, name: String!, hostname: String!, password: String!): Rack!
  rack_install(oid: ID!, iid: ID!, name: String!, engine: String!, region: String!, parameters: [ParameterArg!]!): String!
  rack_remove(oid: ID!, id: ID!): String!
  rack_update(
    oid: ID!
    id: ID!
    name: String!
    runtime: String!
    update_day: Int!
    update_frequency: UpdateFrequency!
    update_hour: Int!
  ): String!
  # signup(email: String!, password: String!): Authentication
}

type Query {
  organization(id: ID!): Organization!
  organizations: [Organization!]!
}

type Subscription {
  rack_logs(oid: ID!, rid: ID!, since: Int): RackLog!
}

type RackLog {
  line: String!
}

enum Access {
  developer
  operator
  administrator
}

type App {
  name: String!
  processes: [Process!]!
  services: [Service!]!
  status: AppStatus!
}

enum AppStatus {
  creating
  deleting
  failed
  rollback
  running
  unknown
  updating
}

type Authentication {
  token: String!
  user: User!
}

type Capacity {
  cpu: CapacityMetric!
  mem: CapacityMetric!
}

type CapacityMetric {
  total: Int!
  used: Int!
}

type Engine {
  description: String!
  name: String!
}

type Member {
  access: Access!
  user: User!
}

type Instance {
  id: ID!
  cpu: Float!
  mem: Float!
  private: String!
  public: String
  started: Int!
  status: InstanceStatus!
}

enum InstanceStatus {
  active
  draining
  unknown
}

type Integration {
  id: ID!
  provider: String!
  title: String!
}

enum IntegrationKind {
  notification
  runtime
  source
}

type Organization {
  access: Access!
  id: ID!
  integrations(kind: IntegrationKind!, provider: String): [Integration!]!
  locked: Boolean!
  members: [Member!]!
  name: String!
  rack(id: ID!): Rack!
  racks: [Rack!]!
  runtime(id: ID!): Runtime!
}

type Parameter {
  key: String!
  value: String!
}

input ParameterArg {
  key: String!
  value: String!
}

type Process {
  app: String!
  cpu: Int!
  id: ID!
  mem: Int!
  release: String!
  service: String!
  started: Int!
  status: String!
}

type Rack {
  id: ID!
  app(name: String!): App!
  apps: [App!]!
  capacity: Capacity!
  instances: [Instance!]!
  name: String!
  processes: [Process!]!
  provider: String!
  resources: [Resource!]!
  runtime: ID
  status: RackStatus!
  updates: [Update!]!
  update_day: Int!
  update_frequency: UpdateFrequency!
  update_hour: Int!
}

enum RackStatus {
  converging
  deleting
  failed
  installing
  rollback
  running
  unknown
  updating
}

type Resource {
  name: ID!
  status: ResourceStatus!
  type: String!
}

enum ResourceStatus {
  creating
  deleting
  failed
  rollback
  running
  unknown
  updating
}

type Runtime {
  id: ID!
  engines: [Engine!]!
  parameters: [String!]!
  provider: String!
  regions: [String!]!
  title: String!
}

type Service {
  count: Int!
  cpu: Int!
  domain: String!
  mem: Int!
  name: ID!
}

type Update {
  created: Int!
  finished: Int
  parameters: [Parameter!]!
  id: ID!
  pid: String
  started: Int
  status: String!
  version: String!
}

enum UpdateFrequency {
  never
  hourly
  daily
  weekly
}

type User {
  email: String!
  id: ID!
}
