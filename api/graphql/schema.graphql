schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Mutation {
  app_create(oid: ID!, rid: ID!, name: String!): App!
  instance_terminate(oid: ID!, rid: ID!, iid: ID!): String!
  login(email: String!, password: String!): Authentication!
  process_stop(oid: ID!, rid: ID!, app: String!, pid: ID!): String!
  rack_import(
    oid: ID!
    name: String!
    hostname: String!
    password: String!
  ): Rack!
  rack_install(
    oid: ID!
    iid: ID!
    name: String!
    engine: String!
    region: String!
    parameters: [ParameterArg!]!
  ): String!
  rack_remove(oid: ID!, id: ID!): String!
  rack_update(
    oid: ID!
    id: ID!
    name: String!
    runtime: String!
    update_day: Int!
    update_frequency: UpdateFrequency!
    update_hour: Int!
  ): String!
  # signup(email: String!, password: String!): Authentication
  token_authentication_request(): TokenRequest!
  token_authentication_response(id:String!, data:String!): Authentication!
  token_delete(id: ID!): String!
  token_register_request(): TokenRequest!
  token_register_response(id:String!, data:String!): String!
  user_cli_token_reset(): String!
  user_password_update(old:String!, new:String!): User!
  user_update(email:String): User!
}

type Query {
  organization(id: ID!): Organization!
  organizations: [Organization!]!
  tokens: [Token!]!
  user: User!
}

type Subscription {
  install_logs(oid: ID!, iid: ID!): Log!
  rack_logs(oid: ID!, rid: ID!, since: Int): Log!
  uninstall_logs(oid: ID!, uid: ID!): Log!
}

enum Access {
  developer
  operator
  administrator
}

type App {
  builds: [Build!]!
  name: String!
  processes: [Process!]!
  releases: [Release!]!
  services: [Service!]!
  status: AppStatus!
}

enum AppStatus {
  creating
  deleting
  failed
  rollback
  running
  unknown
  updating
}

type Authentication {
  key: String!
  session: Session
  user: User!
}

type Build {
  id: ID!
  description: String!
  ended: Int
  logs: String!
  manifest: String!
  release: String
  started: Int!
  status: BuildStatus!
}

enum BuildStatus {
  complete
  failed
  running
  started
}

type Capacity {
  cpu: CapacityMetric!
  mem: CapacityMetric!
}

type CapacityMetric {
  total: Int!
  used: Int!
}

type Engine {
  description: String!
  name: EngineName!
}

enum EngineName {
  v2
  v3
}

type Member {
  access: Access!
  user: User!
}

type Install {
  id: ID!
}

type Instance {
  id: ID!
  cpu: Float!
  mem: Float!
  private: String!
  public: String
  started: Int!
  status: InstanceStatus!
}

enum InstanceStatus {
  active
  draining
  unknown
}

type Integration {
  id: ID!
  provider: String!
  title: String!
}

enum IntegrationKind {
  notification
  runtime
  source
}

type Log {
  line: String!
}

type Organization {
  access: Access!
  id: ID!
  integrations(kind: IntegrationKind!, provider: String): [Integration!]!
  locked: Boolean!
  members: [Member!]!
  name: String!
  rack(id: ID!): Rack!
  racks: [Rack!]!
  runtime(id: ID!): Runtime!
}

type Parameter {
  key: String!
  value: String!
}

input ParameterArg {
  key: String!
  value: String!
}

type Process {
  app: String!
  cpu: Int!
  id: ID!
  mem: Int!
  release: String!
  service: String!
  started: Int!
  status: String!
}

type Rack {
  id: ID!
  app(name: String!): App!
  apps: [App!]!
  capacity: Capacity!
  instances: [Instance!]!
  install: Install
  name: String!
  processes: [Process!]!
  provider: String!
  resources: [Resource!]!
  runtime: ID
  status: RackStatus!
  updates: [Update!]!
  update_day: Int!
  update_frequency: UpdateFrequency!
  update_hour: Int!
  uninstall: Uninstall
  uninstallable: Boolean!
}

enum RackStatus {
  converging
  deleting
  failed
  incomplete
  installing
  rollback
  running
  unknown
  uninstalling
  updating
}

type Release {
  id: ID!
  build: Build
  created: Int!
  description: String!
  env: String!
  manifest: String!
}

type Resource {
  name: ID!
  status: ResourceStatus!
  type: String!
}

enum ResourceStatus {
  creating
  deleting
  failed
  rollback
  running
  unknown
  updating
}

type Runtime {
  id: ID!
  engines: [Engine!]!
  parameters: [String!]!
  provider: String!
  regions: [String!]!
  title: String!
}

type Service {
  count: Int!
  cpu: Int!
  domain: String!
  mem: Int!
  name: ID!
}

type Session {
  id: ID!
  expires: Int!
}

type Token {
  id: ID!
  name: String!
  used: Int!
}

type TokenRequest {
  id: String!
  data: String!
}

type Uninstall {
  id: ID!
}

type Update {
  created: Int!
  finished: Int
  parameters: [Parameter!]!
  id: ID!
  pid: String
  started: Int
  status: String!
  version: String!
}

enum UpdateFrequency {
  never
  hourly
  daily
  weekly
}

type User {
  email: String!
  id: ID!
}
